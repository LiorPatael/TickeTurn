{
  "info": {
    "name": "TickeTurn API Tests",
    "description": "End-to-end Postman collection for TickeTurn (register, login, upload ticket, purchase flow)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Register Seller",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": "{{baseUrl}}/auth/register",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Seller Test\",\n  \"email\": \"seller@example.com\",\n  \"password\": \"password123\"\n}"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Registered seller - status 201', function () { pm.response.to.have.status(201); });",
              "const json = pm.response.json();",
              "if (json && json.token) { pm.environment.set('sellerToken', json.token); }",
              "if (json && json.user && json.user.id) { pm.environment.set('sellerId', json.user.id); }"
            ]
          }
        }
      ]
    },
    {
      "name": "Login Seller",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/auth/login",
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"seller@example.com\",\n  \"password\": \"password123\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Seller login 200', function () { pm.response.to.have.status(200); });",
              "const json = pm.response.json();",
              "if (json && json.token) pm.environment.set('sellerToken', json.token);",
              "if (json && json.user && json.user.id) pm.environment.set('sellerId', json.user.id);"
            ]
          }
        }
      ]
    },
    {
      "name": "Create Ticket",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{sellerToken}}" }
        ],
        "url": "{{baseUrl}}/tickets",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"eventName\": \"Postman E2E Event\",\n  \"eventDate\": \"2025-12-31\",\n  \"price\": 75.5,\n  \"location\": \"Test City\"\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create ticket 201', function () { pm.response.to.have.status(201); });",
              "const json = pm.response.json();",
              "if (json && json.id) pm.environment.set('ticketId', json.id);",
              "if (json && json.eventName) pm.environment.set('ticketName', json.eventName);"
            ]
          }
        }
      ]
    },
    {
      "name": "Register Buyer",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/auth/register",
        "body": { "mode": "raw", "raw": "{\n  \"name\": \"Buyer Test\",\n  \"email\": \"buyer@example.com\",\n  \"password\": \"password123\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": { "exec": [
            "pm.test('Registered buyer - status 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "if (json && json.token) pm.environment.set('buyerToken', json.token);",
            "if (json && json.user && json.user.id) pm.environment.set('buyerId', json.user.id);"
          ] }
        }
      ]
    },
    {
      "name": "Login Buyer",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": "{{baseUrl}}/auth/login",
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"buyer@example.com\",\n  \"password\": \"password123\"\n}" }
      },
      "event": [ { "listen": "test", "script": { "exec": [
        "pm.test('Buyer login 200', function () { pm.response.to.have.status(200); });",
        "const json = pm.response.json();",
        "if (json && json.token) pm.environment.set('buyerToken', json.token);"
      ] } } ]
    },
    {
      "name": "Get Tickets",
      "request": { "method": "GET", "header": [], "url": "{{baseUrl}}/tickets" },
      "event": [ { "listen": "test", "script": { "exec": [
        "pm.test('Get tickets 200', function () { pm.response.to.have.status(200); });",
        "const json = pm.response.json();",
        "pm.test('Ticket list is array', function () { pm.expect(json).to.be.an('array'); });"
      ] } } ]
    },
    {
      "name": "Get Ticket By ID",
      "request": { "method": "GET", "header": [], "url": "{{baseUrl}}/tickets/{{ticketId}}" },
      "event": [ { "listen": "test", "script": { "exec": [
        "pm.test('Get ticket by id 200', function () { pm.response.to.have.status(200); });",
        "const json = pm.response.json();",
        "if (json && json.id) pm.test('Ticket id matches', function () { pm.expect(json.id.toString()).to.eql(pm.environment.get('ticketId').toString()); });"
      ] } } ]
    },
    {
      "name": "Purchase Ticket (buyer)",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{buyerToken}}" } ],
        "url": "{{baseUrl}}/tickets/{{ticketId}}/purchase"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Purchase returns 200 or 201', function () { pm.expect(pm.response.code).to.be.oneOf([200,201]); });",
              "const json = pm.response.json();",
              "pm.test('Response contains isSold true or buyerId', function () { pm.expect(json.isSold || json.buyerId).to.exist; });",
              "pm.environment.set('purchaseResponse', JSON.stringify(json));"
            ]
          }
        }
      ]
    },
    {
      "name": "Verify Ticket Removed From Listings",
      "request": { "method": "GET", "header": [], "url": "{{baseUrl}}/tickets" },
      "event": [ { "listen": "test", "script": { "exec": [
        "pm.test('Tickets endpoint after purchase is 200', function () { pm.response.to.have.status(200); });",
        "const json = pm.response.json();",
        "pm.test('Ticket no longer in listings', function () { pm.expect(json.find(t => t.id && t.id.toString() === pm.environment.get('ticketId').toString())).to.be.undefined; });"
      ] } } ]
    }
  ],
  "event": [],
  "variable": []
}
